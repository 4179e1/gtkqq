#include <chatwindow.h>
#include <qq.h>
#include <gqqconfig.h>
#include <stdlib.h>

extern QQInfo *info;
extern GQQConfig *cfg;

static void qq_chatwindow_init(QQChatWindow *win);
static void qq_chatwindowclass_init(QQChatWindowClass *wc);

//
// Private members
//
typedef struct{
    GtkWidget *faceimage;
    GtkWidget *name, *lnick;

    // The message text area
    GtkWidget *message_textview;

    // Menu
    GtkWidget *menu_bar;
    GtkWidget *font_menuitem, *face_menuitem, *sendfile_menuitem
                , *sendpic_menuitem, *clear_menuitem, *history_menuitem;

    GtkWidget *input_textview;
    
    GtkWidget *send_btn, *close_btn;
}QQChatWindowPriv;

/*
 * The handler of "destroy" singal
 */
static void destroy_handler(GtkWidget *widget, gpointer  data)
{
    g_debug("Destroy chat window.(%s, %d)", __FILE__, __LINE__);
    return;
}

GType qq_chatwindow_get_type()
{
    static GType t = 0;
    if(!t){
        const GTypeInfo info =
        {
            sizeof(QQChatWindowClass),
            NULL,    /* base_init */
            NULL,    /* base_finalize */
            (GClassInitFunc)qq_chatwindowclass_init,
            NULL,    /* class finalize*/
            NULL,    /* class data */
            sizeof(QQChatWindow),
            0,    /* n pre allocs */
            (GInstanceInitFunc)qq_chatwindow_init,
            0
        };

        t = g_type_register_static(GTK_TYPE_WINDOW, "QQChatWindow"
                    , &info, 0);
    }
    return t;
}

GtkWidget* qq_chatwindow_new()
{
    return GTK_WIDGET(g_object_new(qq_chatwindow_get_type()
                        , "type", GTK_WINDOW_TOPLEVEL, NULL));
}


static void qq_chatwindow_init(QQChatWindow *win)
{
    QQChatWindowPriv *priv = G_TYPE_INSTANCE_GET_PRIVATE(win
                                        , qq_chatwindow_get_type()
                                        , QQChatWindowPriv);

    GtkWidget *scrolled_win; 
    GtkWidget *body_vbox = gtk_vbox_new(FALSE, 0);

    GtkWidget *header_hbox = gtk_hbox_new(FALSE, 0);
    GtkWidget *hbox = gtk_hbox_new(FALSE, 0);
    GtkWidget *vbox = gtk_vbox_new(FALSE, 0);

    //create header
    GdkPixbuf *pb = NULL;
    pb= gdk_pixbuf_new_from_file_at_size(IMGDIR"avatar.gif", 50, 50, NULL);
    priv -> faceimage = gtk_image_new_from_pixbuf(pb);
    g_object_unref(pb);
    priv -> name = gtk_label_new("");
    gtk_label_set_markup(GTK_LABEL(priv -> name), "<b>nick</b>");
    priv -> lnick = gtk_label_new("");
    gtk_label_set_markup(GTK_LABEL(priv -> lnick), "<b>long nick</b>");
    gtk_box_pack_start(GTK_BOX(header_hbox), priv -> faceimage, FALSE, FALSE, 15); 
    gtk_box_pack_start(GTK_BOX(vbox), priv -> name, FALSE, FALSE, 15); 
    gtk_box_pack_start(GTK_BOX(vbox), priv -> lnick, FALSE, FALSE, 15); 
    gtk_box_pack_start(GTK_BOX(header_hbox), vbox, FALSE, FALSE, 15); 
    gtk_box_pack_start(GTK_BOX(body_vbox), header_hbox, FALSE, FALSE, 15); 

    priv -> message_textview = gtk_text_view_new(); 
    scrolled_win= gtk_scrolled_window_new(NULL, NULL);
    gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW(scrolled_win),
                GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
    gtk_container_add(GTK_CONTAINER(scrolled_win), priv -> message_textview);
    gtk_box_pack_start(GTK_BOX(body_vbox), scrolled_win, TRUE, TRUE, 15); 

    priv -> menu_bar = gtk_menu_bar_new();
    GtkWidget *img = NULL;

    img = gtk_image_new_from_file(IMGDIR"/selectfont.png");
    priv -> font_menuitem = gtk_image_menu_item_new();
    gtk_image_menu_item_set_image(priv -> font_menuitem, img);
    gtk_menu_shell_append(GTK_MENU_SHELL(priv -> menu_bar), priv -> font_menuitem);

    img = gtk_image_new_from_file(IMGDIR"/selectface.png");
    priv -> face_menuitem = gtk_image_menu_item_new();
    gtk_image_menu_item_set_image(priv -> face_menuitem, img);
    gtk_menu_shell_append(GTK_MENU_SHELL(priv -> menu_bar), priv -> face_menuitem);

    img = gtk_image_new_from_file(IMGDIR"/sendfile.png");
    priv -> sendfile_menuitem = gtk_image_menu_item_new();
    gtk_image_menu_item_set_image(priv -> sendfile__menuitem, img);
    gtk_menu_shell_append(GTK_MENU_SHELL(priv -> menu_bar), priv -> sendfile_menuitem);

    img = gtk_image_new_from_file(IMGDIR"/sendpic.png");
    priv -> sendpic_menuitem = gtk_image_menu_item_new();
    gtk_image_menu_item_set_image(priv -> sendpic_menuitem, img);
    gtk_menu_shell_append(GTK_MENU_SHELL(priv -> menu_bar), priv -> sendpic_menuitem);

    img = gtk_image_new_from_file(IMGDIR"/clearscreen.png");
    priv -> clear_menuitem = gtk_image_menu_item_new();
    gtk_image_menu_item_set_image(priv -> clear_menuitem, img);
    gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), priv -> clear_menuitem);

    img = gtk_image_new_from_file(IMGDIR"/showhistory.png");
    priv -> history_menuitem = gtk_image_menu_item_new();
    gtk_image_menu_item_set_image(priv -> history_menuitem, img);
    gtk_menu_shell_append(GTK_MENU_SHELL(menu_bar), priv -> history_menuitem);

    gtk_box_pack_start(GTK_BOX(body_vbox), menu_bar, FALSE, FALSE, 15); 

    priv -> input_textview = gtk_text_view_new(); 
    scrolled_win= gtk_scrolled_window_new(NULL, NULL);
    gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW(scrolled_win),
                GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
    gtk_container_add(GTK_CONTAINER(scrolled_win), priv -> input_textview);
    gtk_box_pack_start(GTK_BOX(body_vbox), scrolled_win, TRUE, TRUE, 15); 

    GtkWidget *w = GTK_WIDGET(win);
    gtk_widget_set_size_request(w, 500, 500);
    gtk_window_resize(GTK_WINDOW(w), 550, 550);

    g_signal_connect(G_OBJECT(w), "destroy",
                             G_CALLBACK(destroy_handler), NULL);

    gtk_container_add(GTK_CONTAINER(win), body_vbox);
}
static void qq_chatwindowclass_init(QQChatWindowClass *wc)
{
    g_type_class_add_private(wc, sizeof(QQChatWindowPriv));
}

